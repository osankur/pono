;; Timed automaton with two locations, 2 clocks.
;;

(declare-fun x__AT0 () Int)
(declare-fun x__AT1 () Int)
(declare-fun y__AT0 () Int)
(declare-fun y__AT1 () Int)
(declare-fun loc__AT0 () Bool)
(declare-fun loc__AT1 () Bool)

(declare-fun err1 () Bool)
(declare-fun err1_n () Bool)

(declare-fun err2 () Bool)
(declare-fun err2_n () Bool)


(define-fun .def_0 () Int (! x__AT0 :nextclock x__AT1))
(define-fun .def_1 () Int (! y__AT0 :nextclock y__AT1))
(define-fun .def_2 () Int (! loc__AT0 :next loc__AT1))
(define-fun .def_err1 () Int (! err1 :next err1_n))
(define-fun .def_err2 () Int (! err2 :next err2_n))


;; Initial state
(define-fun .def_3 () Bool (! (and
(= x__AT0 0)
(= y__AT0 0)
loc__AT0
(not err1)
(not err2)
) :init true))

;; Location invariant
(define-fun .def_4 () Bool (!
    (<= x__AT0 3)
:locinvar true))

;; Transitions
(define-fun .def_18 () Bool (! (or

  (and (not err1) (not err2) loc__AT0 (and
    (= x__AT1 0)
    (= y__AT0 y__AT1)
    (not loc__AT1)
    (not err1_n) (not err2_n) 
    )
  )
  (and (not err1) (not err2)  (not loc__AT0) (and
    (>= x__AT0 3)
    (= x__AT1 0)
    (= y__AT1 0)
    loc__AT1
    (not err1_n) (not err2_n) 
    )
  )
  (and (not loc__AT0) (> x__AT0 2) err1_n (= err2 err2_n) (= y__AT0 y__AT1) (= x__AT0 x__AT1) (= loc__AT0 loc__AT1))
  (and (not loc__AT0) (< x__AT0 1) err2_n (= err1 err1_n) (= y__AT0 y__AT1) (= x__AT0 x__AT1) (= loc__AT0 loc__AT1))
) :trans true))

(define-fun .def_19 () Bool (! (not err1) :invar-property 0))
(define-fun .def_20 () Bool (! (not err2) :invar-property 1))

(assert true)
