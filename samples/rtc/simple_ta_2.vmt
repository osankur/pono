;; Timed automaton with two locations, 2 clocks.
;;

(declare-fun x__AT0 () Real)
(declare-fun x__AT1 () Real)
(declare-fun y__AT0 () Real)
(declare-fun y__AT1 () Real)
(declare-fun loc__AT0 () Bool)
(declare-fun loc__AT1 () Bool)

(define-fun .def_0 () Real (! x__AT0 :nextclock x__AT1))
(define-fun .def_1 () Real (! y__AT0 :nextclock y__AT1))
(define-fun .def_2 () Real (! loc__AT0 :next loc__AT1))


;; Initial state
(define-fun .def_3 () Bool (! (and
(= x__AT0 (to_real 0))
(= y__AT0 (to_real 0))
loc__AT0
) :init true))

;; Location invariant
(define-fun .def_4 () Bool (!
    (<= x__AT0 (to_real 3))
:locinvar true))

;; Transitions
(define-fun .def_18 () Bool (! (and

  (=> loc__AT0 (and
    (= x__AT1 (to_real 0))
    (= y__AT0 y__AT1)
    (not loc__AT1)
    )
  )

(=> (not loc__AT0) (and
    (>= x__AT0 (to_real 10))
    (= x__AT1 (to_real 0))
    (= y__AT1 (to_real 0))
    loc__AT1
    )
  )

) :trans true))

(define-fun .def_19 () Bool (! (or loc__AT0 (<= x__AT0 2)) :invar-property 0))
(define-fun .def_20 () Bool (! (or loc__AT0 (<= x__AT0 5)) :invar-property 1))

(assert true)
